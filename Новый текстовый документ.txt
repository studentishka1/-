#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
#include <chrono>
#include <stdio.h>
#include <Windows.h>
#include <cmath>
#include <dos.h>
#include <string>

using namespace std;



int nScreenWidth = 120;
int nScreenHeight = 40;
int nMapWidth = 16;
int nMapHeight = 16;

float fPlayerX = 13.0;
float fPlayerY = 13.0;
float fPlayerA = 3.0f;
float fFOV = 3.14159f / 4.0f;
float fDepth = 10.0f;
float fSpeed = 2.5f;
wchar_t* screen = new wchar_t[nScreenWidth * nScreenHeight];
HANDLE hConsole = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);

DWORD dwBytesWritten = 0;




int main()
{
	SetConsoleActiveScreenBuffer(hConsole);
	wstring map;
	char ar[16][16], m = 0, b = 'q';
	std::string s = "", s1;
	int r, x, y, o = 10, n = 4, k, k1, g = 0;
	for (int e = 1;e < 15;e++) {
		for (int w = 1;w < 15;w++) {
			if (e % 2 == 1 && w % 2 == 1) {
				ar[e][w] = '.';
			}
			else {
				ar[e][w] = '#';
			}
		}
	}
	for (int e = 1;e < 14;e++) {
		for (int w = 1;w < 14;w++) {
			if (e % 2 == 1 && w % 2 == 1) {
				if (rand() % n == 1 && ar[e + 1][w] == '#') {
					ar[e + 1][w] = '.';
				}
				else if (rand() % n == 2 && ar[e][w + 1] == '#') {
					ar[e][w + 1] = '.';
				}
				else if (rand() % n == 3 && ar[e - 1][w] == '#') {
					ar[e - 1][w] = '.';
				}
				else if (rand() % n == 0 && ar[e][w - 1] == '#') {
					ar[e][w - 1] = '.';
				}
				else {
					w--;
					n++;
				}
			}
		}
	}
	for (int e = 1;e < 15;e++) {
		for (int w = 1;w < 15;w++) {
			if (e % 2 == 1 && w % 2 == 1) {
				r = rand();
				if (r % 4 == 1) {
					ar[e + 1][w] = '.';
				}
				else if (r % 4 == 2) {
					ar[e][w + 1] = '.';
				}
				else if (r % 4 == 3) {
					ar[e - 1][w] = '.';
				}
			}
		}
	}
	for (int j = 0;j < 16;j++) {
		ar[15][j] = '#';
		ar[0][j] = '#';
		ar[j][15] = '#';
		ar[j][0] = '#';
	}
	r = 15;
	while (1) {
		if (ar[1][r] == '.') {
			ar[0][r] = '.';
			ar[1][r - 2] = '.';
			m++;
		}
		if (ar[1][15 - r + 1] == '.') {
			m++;
			k = 2;
			k1 = 15 - r + 2;
		}
		if (m == 2) {
			break;
		}
		r--;
	}
	for (int i = 0;i < 16;i++) {
		map += L"";
		for (int j = 0;j < 16;j++) {
			map += ar[i][j];
		}
	}
	auto tp1 = chrono::system_clock::now();
	auto tp2 = chrono::system_clock::now();
	while (1)
	{
		if (fPlayerX < 1.2 && fPlayerY > 13.2) {
			system("cls");
			for (int i = 0;i < 15;i++) {
				std::cout << std::endl;
			}
			for (int i = 0;i < 18;i++) {
				std::cout << "   ";
			}
			std::cout << "you are winner";
			while (1) {}
		}
		else if (fPlayerX < 1 && fPlayerY > 13 && g != 1) {
			fPlayerX += 1.0;
			fPlayerA = 1.5f;
		}
		if (fPlayerX < k + 1 && fPlayerY < k1 + 1) {
			g = 1;
		}
		tp2 = chrono::system_clock::now();
		chrono::duration<float> elapsedTime = tp2 - tp1;
		tp1 = tp2;
		float fElapsedTime = elapsedTime.count();

		if (GetAsyncKeyState((unsigned short)'Q')) {
			if (r == 3) {
				r = 4;
			}
		}

		if (GetAsyncKeyState((unsigned short)'A')) {
			fPlayerA -= (fSpeed * 0.75f) * fElapsedTime;
			r = 1;
			b = 'q';
		}

		if (GetAsyncKeyState((unsigned short)'D')) {
			fPlayerA += (fSpeed * 0.75f) * fElapsedTime;
			if (r == 1) {
				r = 2;
			}
			else if (r == 2) {
				r = 3;
			}
			else if (r == 4) {
				r = 5;
				fPlayerA = 1.5f;
			}
			else if (r == 5) {
				r = 5;
				fPlayerA = 1.5f;
			}
			b = 'q';
		}

		if (GetAsyncKeyState((unsigned short)'W'))
		{
			r = 0;
			b = 'q';
			fPlayerX += sin(fPlayerA) * fSpeed * fElapsedTime;;
			fPlayerY += cos(fPlayerA) * fSpeed * fElapsedTime;;
			if (map.c_str()[(int)fPlayerX * nMapWidth + (int)fPlayerY] == '#')
			{
				fPlayerX -= sin(fPlayerA) * fSpeed * fElapsedTime;;
				fPlayerY -= cos(fPlayerA) * fSpeed * fElapsedTime;;
			}

		}
		if (GetAsyncKeyState((unsigned short)'S'))
		{
			r = 0;
			b = 'q';
			fPlayerX -= sin(fPlayerA) * fSpeed * fElapsedTime;;
			fPlayerY -= cos(fPlayerA) * fSpeed * fElapsedTime;;
			if (map.c_str()[(int)fPlayerX * nMapWidth + (int)fPlayerY] == '#')
			{
				fPlayerX += sin(fPlayerA) * fSpeed * fElapsedTime;;
				fPlayerY += cos(fPlayerA) * fSpeed * fElapsedTime;;
			}

		}
		if (b == 'n') {
			fPlayerX -= 0.1;
			for (int i = 0;i < 20000000;i++) {
				i = i;
			}
		}
		else if (b == 's') {
			fPlayerX += 0.1;
			for (int i = 0;i < 20000000;i++) {
				i = i;
			}
		}
		else if (b == 'w') {
			fPlayerY -= 0.1;
			for (int i = 0;i < 20000000;i++) {
				i = i;
			}
		}
		else if (b == 'e') {
			fPlayerY += 0.1;
			for (int i = 0;i < 20000000;i++) {
				i = i;
			}
		}

		o--;
		if (o == 0) {
			o = 9;
		}
		if (r == 5 && o > 8) {
			x = fPlayerX;
			y = fPlayerY;
			for (int i = 0;i < 1000000;i++) {
				i = i;
			}
			if (fPlayerA == 1.5f) {
				if (ar[x][y - 1] == '.') {
					fPlayerA = 2.5f;
					fPlayerY -= 0.1;
					b = 'w';
				}
				else if (ar[x + 1][y] == '.') {
					fPlayerA = 1.5f;
					fPlayerX += 0.1;
					b = 's';
				}

				else if (ar[x][y + 1] == '.') {
					fPlayerA = 0.0f;
					fPlayerY += 0.1;
					b = 'e';
				}
				else if (ar[x - 1][y] == '.') {
					fPlayerA = 4.5f;
					fPlayerX -= 0.1;
					b = 'n';
				}
			}
			else if (fPlayerA == 0.0f) {
				if (ar[x + 1][y] == '.') {
					fPlayerA = 1.5f;
					fPlayerX += 0.1;
					b = 's';
				}
				else if (ar[x][y + 1] == '.') {
					fPlayerA = 0.0f;
					fPlayerY += 0.1;
					b = 'e';
				}
				else if (ar[x - 1][y] == '.') {
					fPlayerA = 4.5f;
					fPlayerX -= 0.1;
					b = 'n';
				}
				else if (ar[x][y - 1] == '.') {
					fPlayerA = 2.5f;
					fPlayerY -= 0.1;
					b = 'w';
				}

			}
			else if (fPlayerA == 2.5f) {
				if (ar[x - 1][y] == '.') {
					fPlayerA = 4.5f;
					fPlayerX -= 0.1;
					b = 'n';
				}
				else if (ar[x][y - 1] == '.') {
					fPlayerA = 2.5f;
					fPlayerY -= 0.1;
					b = 'w';
				}
				else if (ar[x + 1][y] == '.') {
					fPlayerA = 1.5f;
					fPlayerX += 0.1;
					b = 's';
				}
				else if (ar[x][y + 1] == '.') {
					fPlayerA = 0.0f;
					fPlayerY += 0.1;
					b = 'e';
				}

			}
			else if (fPlayerA == 4.5f) {
				if (ar[x][y + 1] == '.') {
					fPlayerA = 0.0f;
					fPlayerY += 0.1;
					b = 'e';
				}
				else if (ar[x - 1][y] == '.') {
					fPlayerA = 4.5f;
					fPlayerX -= 0.1;
					b = 'n';
				}
				else if (ar[x][y - 1] == '.') {
					fPlayerA = 2.5f;
					fPlayerY -= 0.1;
					b = 'w';
				}
				else if (ar[x + 1][y] == '.') {
					fPlayerA = 1.5f;
					fPlayerX += 0.1;
					b = 's';
				}

			}
		}
		for (int x = 0; x < nScreenWidth; x++)
		{
			float fRayAngle = (fPlayerA - fFOV / 2.0f) + ((float)x / (float)nScreenWidth) * fFOV;
			float fStepSize = 0.1f;
			float fDistanceToWall = 0.0f;
			bool bHitWall = false;
			bool bBoundary = false;

			float fEyeX = sinf(fRayAngle);
			float fEyeY = cosf(fRayAngle);
			while (!bHitWall && fDistanceToWall < fDepth)
			{
				fDistanceToWall += fStepSize;
				int nTestX = (int)(fPlayerX + fEyeX * fDistanceToWall);
				int nTestY = (int)(fPlayerY + fEyeY * fDistanceToWall);
				if (nTestX < 0 || nTestX >= nMapWidth || nTestY < 0 || nTestY >= nMapHeight)
				{
					bHitWall = true;
					fDistanceToWall = fDepth;
				}
				else
				{
					if (map.c_str()[nTestX * nMapWidth + nTestY] == '#')
					{
						bHitWall = true;
						vector<pair<float, float>> p;
						for (int tx = 0; tx < 2; tx++)
							for (int ty = 0; ty < 2; ty++)
							{
								float vy = (float)nTestY + ty - fPlayerY;
								float vx = (float)nTestX + tx - fPlayerX;
								float d = sqrt(vx * vx + vy * vy);
								float dot = (fEyeX * vx / d) + (fEyeY * vy / d);
								p.push_back(make_pair(d, dot));
							}
						sort(p.begin(), p.end(), [](const pair<float, float>& left, const pair<float, float>& right) {return left.first < right.first; });
						float fBound = 0.01;
						if (acos(p.at(0).second) < fBound) bBoundary = true;
						if (acos(p.at(1).second) < fBound) bBoundary = true;
						if (acos(p.at(2).second) < fBound) bBoundary = true;
					}
				}
			}
			int nCeiling = (float)(nScreenHeight / 2.0) - nScreenHeight / ((float)fDistanceToWall);
			int nFloor = nScreenHeight - nCeiling;
			short nShade = ' ';
			if (fDistanceToWall <= fDepth / 4.0f)			nShade = 0x2588;
			else if (fDistanceToWall < fDepth / 3.0f)		nShade = 0x2593;
			else if (fDistanceToWall < fDepth / 2.0f)		nShade = 0x2592;
			else if (fDistanceToWall < fDepth)				nShade = 0x2591;
			else											nShade = ' ';

			if (bBoundary)		nShade = ' ';

			for (int y = 0; y < nScreenHeight; y++)
			{
				if (y <= nCeiling)
					screen[y * nScreenWidth + x] = ' ';
				else if (y > nCeiling && y <= nFloor)
					screen[y * nScreenWidth + x] = nShade;
				else
				{
					float b = 1.0f - (((float)y - nScreenHeight / 2.0f) / ((float)nScreenHeight / 2.0f));
					if (b < 0.25)		nShade = '#';
					else if (b < 0.5)	nShade = 'x';
					else if (b < 0.75)	nShade = '.';
					else if (b < 0.9)	nShade = '-';
					else				nShade = ' ';
					screen[y * nScreenWidth + x] = nShade;
				}
			}
		}
		swprintf_s(screen, 40, L"X=%3.2f, Y=%3.2f, A=%3.2f FPS=%3.2f ", fPlayerX, fPlayerY, fPlayerA, 1.0f / fElapsedTime);
		for (int nx = 0; nx < nMapWidth; nx++)
			for (int ny = 0; ny < nMapWidth; ny++)
			{
				screen[(ny + 1) * nScreenWidth + nx] = map[ny * nMapWidth + nx];
			}
		screen[((int)fPlayerX + 1) * nScreenWidth + (int)fPlayerY] = 'P';
		screen[nScreenWidth * nScreenHeight - 1] = '\0';
		WriteConsoleOutputCharacter(hConsole, screen, nScreenWidth * nScreenHeight, { 0,0 }, &dwBytesWritten);

	}
	return 0;
}